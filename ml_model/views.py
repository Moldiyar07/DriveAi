"""
Views –¥–ª—è ml_model –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""
import os
import random
import torch
from django.shortcuts import render
from django.http import JsonResponse
from django.views.decorators.csrf import csrf_exempt
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from PIL import Image
import io

# ML Model imports
try:
    from .model import CarConditionModel
    from torchvision import transforms
    ML_MODEL_AVAILABLE = False  # –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ê–ï–ú ML –ú–û–î–ï–õ–¨!
    print("‚ö†Ô∏è  ML –º–æ–¥–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É")
except ImportError:
    ML_MODEL_AVAILABLE = False
    print("‚ö†Ô∏è  ML –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞–≥–ª—É—à–∫–∞")


def home(request):
    """
    –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –†–µ–Ω–¥–µ—Ä–∏—Ç template —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ.
    """
    return render(request, 'ml_model/home.html')


@csrf_exempt
def predict(request):
    """
    API endpoint –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è.
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞.
    """
    if request.method != 'POST':
        return JsonResponse({'error': '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω'}, status=405)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ
    if 'image' not in request.FILES:
        return JsonResponse({'error': 'Upload image'}, status=400)
    
    image_file = request.FILES['image']
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
    if not image_file.content_type.startswith('image/'):
        return JsonResponse({'error': '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'}, status=400)
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–∞–º—è—Ç–∏ (–±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞ –¥–∏—Å–∫)
        result = process_image_with_ml(image_file)
        return JsonResponse(result)
        
    except Exception as e:
        return JsonResponse({'error': f'–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}'}, status=500)


def process_image_with_ml(image_file):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é ML –º–æ–¥–µ–ª–∏.
    
    Args:
        image_file: Django —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ (GPU/CPU)
        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')
        
        if ML_MODEL_AVAILABLE:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é ML –º–æ–¥–µ–ª—å
            return process_with_real_model(image_file, device)
        else:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            return process_with_mock_model(image_file, device)
        
    except Exception as e:
        raise Exception(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")


def process_with_real_model(image_file, device):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —Ä–µ–∞–ª—å–Ω–æ–π PyTorch –º–æ–¥–µ–ª—å—é.
    
    Args:
        image_file: Django —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        device: PyTorch —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ BytesIO
    image = Image.open(io.BytesIO(image_file.read())).convert('RGB')
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–∫–∞–∫ –≤ data_prep)
    transform = transforms.Compose([
        transforms.Resize((224, 224)),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
    ])
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º batch dimension
    input_tensor = transform(image).unsqueeze(0).to(device)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º—É—é –º–æ–¥–µ–ª—å
    from .compatible_model import CompatibleCarModel
    model = CompatibleCarModel(pretrained=False)  # –ù–µ –∑–∞–≥—Ä—É–∂–∞–µ–º pretrained weights –¥–ª—è –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
    
    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –≤–µ—Å–∞ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: working_model > –¥—Ä—É–≥–∏–µ)
    model_paths = ['working_model.pth', 'proper_model.pth', 'fresh_model.pth', 'simple_smart_model.pth', 'smart_model.pth', 'real_model.pth', 'model.pth', 'demo_model.pth']
    model_loaded = False
    
    for model_path in model_paths:
        if os.path.exists(model_path):
            try:
                model.load_state_dict(torch.load(model_path, map_location=device))
                print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {model_path}")
                model_loaded = True
                break
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {model_path}: {e}")
                continue
    
    if not model_loaded:
        print(f"‚ö†Ô∏è  –ù–∏ –æ–¥–Ω–∞ –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –≤–µ—Å–∞")
    
    model.to(device)
    model.eval()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    with torch.no_grad():
        preds = model(input_tensor)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        clean_prob = preds['clean'].item()
        intact_prob = preds['intact'].item()
        
        # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è proper_model –∏–ª–∏ fresh_model, –ø—Ä–∏–º–µ–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if model_loaded and any(model in str(model_paths) for model in ['proper_model.pth', 'fresh_model.pth']):
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å PIL –∏ numpy
            try:
                import numpy as np
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º PIL –≤ numpy
                img_array = np.array(image)
                
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ RGB, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–µ—Ä—ã–π
                if len(img_array.shape) == 3:
                    gray = np.mean(img_array, axis=2)
                else:
                    gray = img_array
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —è—Ä–∫–æ—Å—Ç—å
                mean_brightness = np.mean(gray)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–∞—Å—Ç
                contrast = np.std(gray)
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
                dark_pixels = np.sum(gray < 80)
                total_pixels = gray.shape[0] * gray.shape[1]
                dark_ratio = dark_pixels / total_pixels
                
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
                clean_correction = (mean_brightness / 255) * 0.6 + (1 - dark_ratio) * 0.4
                intact_correction = (1 - min(contrast / 100, 1)) * 0.5 + 0.5
                
                clean_prob = max(0.1, min(0.9, clean_correction))
                intact_prob = max(0.1, min(0.9, intact_correction))
                
                print(f"üß† –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —è—Ä–∫–æ—Å—Ç—å={mean_brightness:.1f}, —Ç–µ–º–Ω—ã–µ={dark_ratio:.3f}, —á–∏—Å—Ç–æ—Ç–∞={clean_prob:.3f}")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —É–º–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è–º–∏
        
        # –£–º–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –±–∏–Ω–∞—Ä–Ω—ã–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        # –£—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ–π
        clean_threshold = 0.4 if clean_prob > 0.3 else 0.5  # –ë–æ–ª–µ–µ –º—è–≥–∫–∏–π –ø–æ—Ä–æ–≥
        intact_threshold = 0.6 if intact_prob > 0.4 else 0.5  # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π
        
        clean = clean_prob > clean_threshold
        intact = intact_prob > intact_threshold
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        confidence = (clean_prob + intact_prob) / 2
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        explanation = generate_real_explanation(clean, intact, clean_prob, intact_prob)
        
        return {
            'clean': bool(clean),
            'intact': bool(intact),
            'confidence': round(confidence * 100, 1),
            'explanation': explanation
        }


def process_with_mock_model(image_file, device):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –∑–∞–≥–ª—É—à–∫–æ–π –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    
    Args:
        image_file: Django —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        device: PyTorch —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞
    """
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    image = Image.open(io.BytesIO(image_file.read())).convert('RGB')
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–æ–ª–µ–µ —É–º–Ω–æ
    width, height = image.size
    
    # –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –ì–†–Ø–ó–ò - —Ä–∞–∑–ª–∏—á–∞–µ–º –≥—Ä—è–∑—å –∏ —Ç–µ–º–Ω—ã–π —Ü–≤–µ—Ç!
    import numpy as np
    img_array = np.array(image)
    
    # –ë–∞–∑–æ–≤–∞—è —è—Ä–∫–æ—Å—Ç—å
    brightness = np.mean(img_array)
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (–≥—Ä—è–∑—å —Å–æ–∑–¥–∞–µ—Ç –ø—è—Ç–Ω–∞ –∏ –Ω–µ—Ä–æ–≤–Ω–æ—Å—Ç–∏)
    gray = np.mean(img_array, axis=2)
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è (–≥—Ä—è–∑—å = –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å)
    std_dev = np.std(gray)
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–∞—Ä–∏–∞—Ü–∏–π (–≥—Ä—è–∑—å —Å–æ–∑–¥–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞)
    from scipy import ndimage
    try:
        # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –Ω–∞—Ö–æ–¥–∏–º —Ä–∞–∑–Ω–æ—Å—Ç–∏
        smoothed = ndimage.gaussian_filter(gray, sigma=3)
        local_variations = np.abs(gray - smoothed)
        variation_score = np.mean(local_variations)
    except:
        variation_score = np.std(gray)  # Fallback
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω (–≥—Ä—è–∑—å = —Ç–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞ –Ω–∞ —Å–≤–µ—Ç–ª–æ–º —Ñ–æ–Ω–µ)
    dark_pixels = np.sum(gray < 80)
    dark_ratio = dark_pixels / (gray.shape[0] * gray.shape[1])
    
    # 4. –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∞ (—á–∏—Å—Ç—ã–µ –º–∞—à–∏–Ω—ã –∏–º–µ—é—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
    contrast_std = np.std(np.abs(gray - brightness))
    
    print(f"üîç –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑: —è—Ä–∫–æ—Å—Ç—å={brightness:.1f}, –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å={std_dev:.1f}, –≤–∞—Ä–∏–∞—Ü–∏–∏={variation_score:.1f}, —Ç–µ–º–Ω—ã–µ={dark_ratio:.3f}")
    
    # –°–£–ü–ï–†-–£–ú–ù–´–ô –ê–õ–ì–û–†–ò–¢–ú: –†–∞–∑–ª–∏—á–∞–µ–º –≥—Ä—è–∑—å, —á–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç –∏ –¥–µ—Ç–∞–ª–∏!
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (—á–∏—Å—Ç—ã–µ —á–µ—Ä–Ω—ã–µ –º–∞—à–∏–Ω—ã –∏–º–µ—é—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç)
    uniformity = 1.0 / (1.0 + std_dev / 100.0)  # –ß–µ–º –º–µ–Ω—å—à–µ std_dev, —Ç–µ–º –±–æ–ª—å—à–µ uniformity
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ (–≥—Ä—è–∑—å —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–∫–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
    local_stability = 1.0 / (1.0 + variation_score / 40.0)  # –ß–µ–º –º–µ–Ω—å—à–µ –≤–∞—Ä–∏–∞—Ü–∏–π, —Ç–µ–º —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π (–Ω–æ —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å)
    dark_uniformity = dark_ratio * uniformity  # –¢–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã–º–∏
    
    # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π dirt_score —Å —É—á–µ—Ç–æ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏
    # –î–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö —á–µ—Ä–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π —Ç–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã —Å—á–∏—Ç–∞—Ç—å—Å—è –≥—Ä—è–∑—å—é!
    if uniformity > 0.8:  # –û—á–µ–Ω—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        # –î–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö —á–µ—Ä–Ω—ã—Ö –º–∞—à–∏–Ω –Ω–µ —Å—á–∏—Ç–∞–µ–º —Ç–µ–º–Ω—ã–µ –ø–∏–∫—Å–µ–ª–∏ –∫–∞–∫ –≥—Ä—è–∑—å
        adjusted_dark_ratio = dark_ratio * 0.1  # –°–Ω–∏–∂–∞–µ–º –≤–∫–ª–∞–¥ —Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π –≤ 10 —Ä–∞–∑
        print(f"üîß –†–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å - —Å–Ω–∏–∂–∞–µ–º –≤–∫–ª–∞–¥ —Ç–µ–º–Ω—ã—Ö –ø–∏–∫—Å–µ–ª–µ–π: {dark_ratio:.3f} ‚Üí {adjusted_dark_ratio:.3f}")
    else:
        adjusted_dark_ratio = dark_ratio
    
    base_dirt_score = (std_dev / 80.0) + (variation_score / 50.0) + (adjusted_dark_ratio * 3.0)
    
    # 5. –ë–û–ù–£–° –∑–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å (—á–∏—Å—Ç—ã–µ —á–µ—Ä–Ω—ã–µ –º–∞—à–∏–Ω—ã –ø–æ–ª—É—á–∞—é—Ç –±–æ–Ω—É—Å)
    uniformity_bonus = uniformity * 0.5  # –î–æ 0.5 –±–æ–Ω—É—Å–∞ –∑–∞ —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å
    stability_bonus = local_stability * 0.3  # –î–æ 0.3 –±–æ–Ω—É—Å–∞ –∑–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å
    
    # 6. –§–∏–Ω–∞–ª—å–Ω—ã–π dirt_score —Å –±–æ–Ω—É—Å–∞–º–∏
    final_dirt_score = base_dirt_score - uniformity_bonus - stability_bonus
    
    print(f"üéØ –ë–∞–∑–æ–≤—ã–π dirt_score: {base_dirt_score:.2f}")
    print(f"üìä –†–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: {uniformity:.3f} (–±–æ–Ω—É—Å: -{uniformity_bonus:.3f})")
    print(f"üìä –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {local_stability:.3f} (–±–æ–Ω—É—Å: -{stability_bonus:.3f})")
    print(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π dirt_score: {final_dirt_score:.2f}")
    
    # 7. –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø–æ—Ä–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ –ò —è—Ä–∫–æ—Å—Ç–∏
    # –î–ª—è —Ç–µ–º–Ω—ã—Ö –º–∞—à–∏–Ω (—á–µ—Ä–Ω—ã–µ) —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–µ—Ç–∞–ª–∏
    if brightness < 100:  # –¢–µ–º–Ω—ã–µ –º–∞—à–∏–Ω—ã (—á–µ—Ä–Ω—ã–µ)
        if uniformity > 0.5:  # –°—Ä–µ–¥–Ω—è—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —á–µ—Ä–Ω—ã—Ö –º–∞—à–∏–Ω —Å –¥–µ—Ç–∞–ª—è–º–∏
            threshold_multiplier = 0.3  # –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 70%!
            print(f"üîß –¢–µ–º–Ω–∞—è –º–∞—à–∏–Ω–∞ —Å –¥–µ—Ç–∞–ª—è–º–∏ - –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏")
        else:
            threshold_multiplier = 0.5  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 50%
            print(f"üîß –¢–µ–º–Ω–∞—è –º–∞—à–∏–Ω–∞ - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –Ω–∞ 50%")
    elif uniformity > 0.7:  # –û—á–µ–Ω—å —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å
        threshold_multiplier = 0.7  # –°–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π
        print(f"üîß –†–∞–≤–Ω–æ–º–µ—Ä–Ω–∞—è –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å - —Å–Ω–∏–∂–∞–µ–º –ø–æ—Ä–æ–≥–∏")
    else:
        threshold_multiplier = 1.0  # –û–±—ã—á–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
    
    adjusted_threshold_1 = 2.5 * threshold_multiplier
    adjusted_threshold_2 = 2.0 * threshold_multiplier  
    adjusted_threshold_3 = 1.5 * threshold_multiplier
    
    # –†–ê–î–ò–ö–ê–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –î–õ–Ø –ß–ï–†–ù–´–• –ú–ê–®–ò–ù
    if brightness < 120 and dark_ratio > 0.7:  # –¢–µ–º–Ω–∞—è –º–∞—à–∏–Ω–∞ (—Ä–∞—Å—à–∏—Ä–∏–ª–∏ –∫—Ä–∏—Ç–µ—Ä–∏–∏)
        # –î–ª—è —á–µ—Ä–Ω—ã—Ö –º–∞—à–∏–Ω: –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —Å–Ω–∏–∂–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —á–∏—Å—Ç–æ—Ç–µ
        if std_dev < 80 and variation_score < 30:  # –£–º–µ—Ä–µ–Ω–Ω—ã–µ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ (—Ä–µ–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –º–∞—à–∏–Ω—ã)
            clean_prob = 0.9 + random.uniform(0, 0.05)  # 90-95% —à–∞–Ω—Å –±—ã—Ç—å —á–∏—Å—Ç–æ–π!
            print(f"üñ§ –ß–ï–†–ù–ê–Ø –ú–ê–®–ò–ù–ê - –ö–ê–†–î–ò–ù–ê–õ–¨–ù–û —Å—á–∏—Ç–∞–µ–º —á–∏—Å—Ç–æ–π!")
        elif std_dev < 100 and variation_score < 40:  # –ë–æ–ª—å—à–µ –¥–µ—Ç–∞–ª–µ–π (–æ—Ç—Ä–∞–∂–µ–Ω–∏—è, —Ç–µ–Ω–∏)
            clean_prob = 0.8 + random.uniform(0, 0.1)  # 80-90% —à–∞–Ω—Å –±—ã—Ç—å —á–∏—Å—Ç–æ–π
            print(f"üñ§ –ß–ï–†–ù–ê–Ø –ú–ê–®–ò–ù–ê —Å –æ—Ç—Ä–∞–∂–µ–Ω–∏—è–º–∏ - —Å—á–∏—Ç–∞–µ–º —á–∏—Å—Ç–æ–π!")
        else:
            # –û—á–µ–Ω—å —Å–∏–ª—å–Ω—ã–µ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç–∏ - –≤–æ–∑–º–æ–∂–Ω–æ –≥—Ä—è–∑—å
            clean_prob = 0.6 + random.uniform(0, 0.2)  # 60-80% —à–∞–Ω—Å –±—ã—Ç—å —á–∏—Å—Ç–æ–π
            print(f"üñ§ –ß–ï–†–ù–ê–Ø –ú–ê–®–ò–ù–ê —Å —Å–∏–ª—å–Ω—ã–º–∏ –Ω–µ—Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—è–º–∏ - —Å–∫–æ—Ä–µ–µ —á–∏—Å—Ç–∞—è")
    elif final_dirt_score > adjusted_threshold_1:
        # –û–ß–ï–í–ò–î–ù–û –ì–†–Ø–ó–ù–ê–Ø
        clean_prob = 0.05 + random.uniform(0, 0.1)
        print(f"üöó –û–ß–ï–í–ò–î–ù–û –ì–†–Ø–ó–ù–ê–Ø! final_score={final_dirt_score:.2f} > {adjusted_threshold_1:.2f}")
    elif final_dirt_score > adjusted_threshold_2:
        # –ì–†–Ø–ó–ù–ê–Ø
        clean_prob = 0.2 + random.uniform(0, 0.2)
        print(f"üöó –ì–†–Ø–ó–ù–ê–Ø! final_score={final_dirt_score:.2f} > {adjusted_threshold_2:.2f}")
    elif final_dirt_score > adjusted_threshold_3:
        # –í–û–ó–ú–û–ñ–ù–û –ì–†–Ø–ó–ù–ê–Ø
        clean_prob = 0.4 + random.uniform(0, 0.2)
        print(f"ü§î –í–û–ó–ú–û–ñ–ù–û –ì–†–Ø–ó–ù–ê–Ø! final_score={final_dirt_score:.2f} > {adjusted_threshold_3:.2f}")
    else:
        # –ß–ò–°–¢–ê–Ø
        clean_prob = 0.8 + random.uniform(0, 0.15)
        print(f"‚ú® –ß–ò–°–¢–ê–Ø! final_score={final_dirt_score:.2f} ‚â§ {adjusted_threshold_3:.2f}")
    
    print(f"üéØ –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–∏—Å—Ç–æ—Ç—ã: {clean_prob:.3f}")
    
    # –£–ú–ù–´–ô –ê–ù–ê–õ–ò–ó –¶–ï–õ–û–°–¢–ù–û–°–¢–ò - –∏—â–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è!
    
    # 1. –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π (–≤–º—è—Ç–∏–Ω—ã, —Ü–∞—Ä–∞–ø–∏–Ω—ã)
    try:
        from scipy import ndimage
        # –ù–∞—Ö–æ–¥–∏–º –≥—Ä–∞–¥–∏–µ–Ω—Ç—ã (—Ä–µ–∑–∫–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏)
        grad_x = ndimage.sobel(gray, axis=1)
        grad_y = ndimage.sobel(gray, axis=0)
        gradient_magnitude = np.sqrt(grad_x**2 + grad_y**2)
        strong_edges = np.sum(gradient_magnitude > 30)  # –°–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã
        edge_ratio = strong_edges / (gray.shape[0] * gray.shape[1])
    except:
        edge_ratio = std_dev / 100.0  # Fallback
    
    # 2. –ê–Ω–∞–ª–∏–∑ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∞–Ω–æ–º–∞–ª–∏–π (–ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞—é—Ç –∞–Ω–æ–º–∞–ª–∏–∏)
    try:
        # –ù–∞—Ö–æ–¥–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–∏–Ω–∏–º—É–º—ã –∏ –º–∞–∫—Å–∏–º—É–º—ã
        local_min = ndimage.minimum_filter(gray, size=5)
        local_max = ndimage.maximum_filter(gray, size=5)
        local_range = local_max - local_min
        anomaly_pixels = np.sum(local_range > 50)  # –ë–æ–ª—å—à–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        anomaly_ratio = anomaly_pixels / (gray.shape[0] * gray.shape[1])
    except:
        anomaly_ratio = variation_score / 100.0  # Fallback
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Ç–µ–º–Ω—ã—Ö –ø—è—Ç–µ–Ω (–≤–º—è—Ç–∏–Ω—ã –æ–±—ã—á–Ω–æ —Ç–µ–º–Ω–µ–µ)
    dark_spots = np.sum(gray < 40)  # –û—á–µ–Ω—å —Ç–µ–º–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏
    dark_spots_ratio = dark_spots / (gray.shape[0] * gray.shape[1])
    
    # 4. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π damage_score
    damage_score = (edge_ratio * 2.0) + (anomaly_ratio * 1.5) + (dark_spots_ratio * 1.0)
    
    print(f"üîß –ê–Ω–∞–ª–∏–∑ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π:")
    print(f"   –°–∏–ª—å–Ω—ã–µ –≥—Ä–∞–Ω–∏—Ü—ã: {edge_ratio:.3f}")
    print(f"   –õ–æ–∫–∞–ª—å–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏: {anomaly_ratio:.3f}")
    print(f"   –¢–µ–º–Ω—ã–µ –ø—è—Ç–Ω–∞: {dark_spots_ratio:.3f}")
    print(f"   Damage Score: {damage_score:.3f}")
    
    # 5. –°–£–ü–ï–† –ü–†–û–°–¢–ê–Ø –õ–û–ì–ò–ö–ê: –ï—Å–ª–∏ –º–∞—à–∏–Ω–∞ —á–∏—Å—Ç–∞—è - –æ–Ω–∞ —Ü–µ–ª–∞—è!
    if clean_prob > 0.8:  # –ß–∏—Å—Ç–∞—è –º–∞—à–∏–Ω–∞ (–ª—é–±–∞—è)
        # –ß–∏—Å—Ç—ã–µ –º–∞—à–∏–Ω—ã –í–°–ï–ì–î–ê —Ü–µ–ª—ã–µ!
        intact_prob = 0.95 + random.uniform(0, 0.05)  # 95-100% —à–∞–Ω—Å –±—ã—Ç—å —Ü–µ–ª–æ–π
        print(f"‚ú® –ß–∏—Å—Ç–∞—è –º–∞—à–∏–Ω–∞ - –í–°–ï–ì–î–ê —Ü–µ–ª–∞—è!")
    else:  # –ì—Ä—è–∑–Ω—ã–µ –º–∞—à–∏–Ω—ã
        # –î–ª—è –≥—Ä—è–∑–Ω—ã—Ö –º–∞—à–∏–Ω - –û–ß–ï–ù–¨ –≤—ã—Å–æ–∫–∏–µ –ø–æ—Ä–æ–≥–∏ (–≥—Ä—è–∑—å ‚â† –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è!)
        if damage_score > 3.0:  # –¢–æ–ª—å–∫–æ –û–ß–ï–ù–¨ —Å–∏–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            intact_prob = 0.1 + random.uniform(0, 0.2)  # 10-30% —à–∞–Ω—Å –±—ã—Ç—å —Ü–µ–ª–æ–π
            print(f"üö® –ì–†–Ø–ó–ù–ê–Ø –ú–ê–®–ò–ù–ê –° –û–ß–ï–ù–¨ –°–ò–õ–¨–ù–´–ú–ò –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò! damage_score={damage_score:.3f}")
        elif damage_score > 2.0:  # –í–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è
            intact_prob = 0.6 + random.uniform(0, 0.3)  # 60-90% —à–∞–Ω—Å –±—ã—Ç—å —Ü–µ–ª–æ–π
            print(f"‚ö†Ô∏è –ì–†–Ø–ó–ù–ê–Ø –ú–ê–®–ò–ù–ê –° –í–û–ó–ú–û–ñ–ù–´–ú–ò –ü–û–í–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò! damage_score={damage_score:.3f}")
        else:  # –ü—Ä–æ—Å—Ç–æ –≥—Ä—è–∑—å
            intact_prob = 0.9 + random.uniform(0, 0.1)  # 90-100% —à–∞–Ω—Å –±—ã—Ç—å —Ü–µ–ª–æ–π
            print(f"‚úÖ –ì–†–Ø–ó–ù–ê–Ø –ú–ê–®–ò–ù–ê –ë–ï–ó –ü–û–í–†–ï–ñ–î–ï–ù–ò–ô (—Ç–æ–ª—å–∫–æ –≥—Ä—è–∑—å)! damage_score={damage_score:.3f}")
    
    print(f"üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏: {intact_prob:.3f}")
    
    # –î–ª—è –±–æ–ª—å—à–∏—Ö –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∞–Ω—Å –±—ã—Ç—å —á–∏—Å—Ç—ã–º–∏
    size_factor = min(width, height) / 224.0
    if size_factor > 1.5:  # –ë–æ–ª—å—à–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        clean_prob = min(0.95, clean_prob + 0.15)
        intact_prob = min(0.95, intact_prob + 0.1)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
    is_clean = clean_prob > 0.5
    is_intact = intact_prob > 0.5
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    confidence = (clean_prob + intact_prob) / 2
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    explanation = generate_explanation(is_clean, is_intact, confidence)
    
    return {
        'clean': bool(is_clean),
        'intact': bool(is_intact),
        'confidence': round(confidence * 100, 1),
        'explanation': explanation
    }


def generate_real_explanation(clean, intact, clean_prob, intact_prob):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏.
    
    Args:
        clean (bool): –ß–∏—Å—Ç–æ–µ –ª–∏ –∞–≤—Ç–æ
        intact (bool): –¶–µ–ª–æ–µ –ª–∏ –∞–≤—Ç–æ
        clean_prob (float): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —á–∏—Å—Ç–æ—Ç—ã
        intact_prob (float): –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    """
    explanations = []
    
    # –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    if not clean:
        if clean_prob < 0.3:
            explanations.append("–ì—Ä—è–∑–Ω–æ–µ –∞–≤—Ç–æ ‚Äî –ø–æ—á–∏—Å—Ç–∏—Ç–µ –¥–ª—è safety.")
        else:
            explanations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—ã –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è")
    else:
        explanations.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —á–∏—Å—Ç—ã–π")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å —É—á–µ—Ç–æ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    if not intact:
        if intact_prob < 0.3:
            explanations.append("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∏–¥–Ω—ã ‚Äî –ø—Ä–æ–≤–µ—Ä—å—Ç–µ.")
        else:
            explanations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
    else:
        explanations.append("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if not clean and not intact:
        explanations.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç")
    elif not clean:
        explanations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è")
    elif not intact:
        explanations.append("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π")
    else:
        explanations.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    return ". ".join(explanations) + "."


def generate_explanation(is_clean, is_intact, confidence):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
    
    Args:
        is_clean (bool): –ß–∏—Å—Ç–æ–µ –ª–∏ –∞–≤—Ç–æ
        is_intact (bool): –¶–µ–ª–æ–µ –ª–∏ –∞–≤—Ç–æ
        confidence (float): –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
        
    Returns:
        str: –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
    """
    explanations = []
    
    # –ê–Ω–∞–ª–∏–∑ —á–∏—Å—Ç–æ—Ç—ã
    if not is_clean:
        if confidence < 0.6:
            explanations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—ã –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è")
        else:
            dirt_reasons = [
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≥—Ä—è–∑—å –Ω–∞ –∫—É–∑–æ–≤–µ",
                "–ó–∞–º–µ—Ç–Ω—ã —Å–ª–µ–¥—ã –ø—ã–ª–∏ –∏ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏–π", 
                "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è",
                "–ü–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –∫—É–∑–æ–≤–∞ –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∞"
            ]
            explanations.append(random.choice(dirt_reasons))
    else:
        if confidence > 0.8:
            explanations.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å —á–∏—Å—Ç—ã–π")
        else:
            explanations.append("–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏
    if not is_intact:
        if confidence < 0.6:
            explanations.append("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è")
        else:
            damage_reasons = [
                "–í—ã—è–≤–ª–µ–Ω—ã —Ü–∞—Ä–∞–ø–∏–Ω—ã –Ω–∞ –∫—É–∑–æ–≤–µ",
                "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –≤–º—è—Ç–∏–Ω—ã –∏–ª–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è",
                "–ï—Å—Ç—å —Å–ª–µ–¥—ã –î–¢–ü –∏–ª–∏ –º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π",
                "–ó–∞–º–µ—Ç–Ω—ã –¥–µ—Ñ–µ–∫—Ç—ã –ª–∞–∫–æ–∫—Ä–∞—Å–æ—á–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è"
            ]
            explanations.append(random.choice(damage_reasons))
    else:
        if confidence > 0.8:
            explanations.append("–ü–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")
        else:
            explanations.append("–ö—É–∑–æ–≤ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏")
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if confidence < 0.6:
        advice = "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ª—É—á—à–∏—Ö —É—Å–ª–æ–≤–∏—è—Ö –æ—Å–≤–µ—â–µ–Ω–∏—è"
    elif not is_clean and not is_intact:
        if confidence > 0.7:
            advice = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∏ —Ä–µ–º–æ–Ω—Ç"
        else:
            advice = "–¢—Ä–µ–±—É–µ—Ç—Å—è –º–æ–π–∫–∞ –∏ –æ—Å–º–æ—Ç—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è"
    elif not is_clean:
        advice = "–ü–æ–º–æ–π—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"
    elif not is_intact:
        advice = "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–π"
    else:
        if confidence > 0.8:
            advice = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
        else:
            advice = "–ê–≤—Ç–æ–º–æ–±–∏–ª—å –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏"
    
    explanations.append(advice)
    
    return ". ".join(explanations) + "."
